'name': 'Dafny'
'scopeName': 'source.dafny'
'fileTypes': [
  'dfy'
]
'repository':
  'code': 'patterns': [
    { 'include': '#comments' }
    { 'include': '#comments-inline' }
    { 'include': '#keywords' }
  ]
  'comments': 'patterns': [
    {
      'captures': '0': 'name': 'punctuation.definition.comment.dafny'
      'name': 'comment.block.empty.dafny'
      'match': '/\\*\\*/'
    }
    { 'include': '#comments-inline' }
  ]
  'comments-inline': 'patterns': [
    {
      'captures': '0': 'name': 'punctuation.definition.comment.dafny'
      'begin': '/\\*'
      'end': '\\*/'
      'name': 'comment.block.dafny'
    }
    {
      'captures':
        '1': 'name': 'comment.line.double-slash.dafny'
        '2': 'name': 'punctuation.definition.comment.dafny'
      'match': '\\s*((//).*$\\n?)'
    }
  ]
  'keywords': 'patterns': [
    {
      'name': 'keyword.control.dafny'
      'match': '\\b(class|datatype|codatatype|type|function|ghost|var|method|constructor|comethod|abstract|module|import|default|as|opened|static|refines|returns|break|then|else|if|label|return|while|print|where|new|parallel|in|this|fresh|choose|match|case|assert|assume|predicate|copredicate|forall|exists|false|true|null|old|calc|iterator|yields|yield)\\b'
    }
    {
      'name': 'entity.name.function'
      'match': '\\b(function)\\b'
    }
    {
      'name': 'punctuation.terminator.dafny'
      'match': ';'
    }
    {
      'name': 'keyword.control.verify.dafny'
      'match': '\\b(requires|ensures|modifies|reads|free|invariant|decreases)\\b'
    }
    {
      'name': 'keyword.type.dafny'
      'match': '\\b(bool|multiset|map|nat|int|object|set|seq|array)\\b'
    }
    {
      'name': 'keyword.control.catch-exception.dafny'
      'match': '\\b(try|catch|finally|throw)\\b'
    }
    {
      'name': 'keyword.control.dafny'
      'match': '\\?|:'
    }
    {
      'name': 'keyword.operator.comparison.dafny'
      'match': '(==|!=|<=|>=|<>|<|>)'
    }
    {
      'name': 'keyword.operator.assignment.dafny'
      'match': '(:=)'
    }
    {
      'name': 'keyword.operator.increment-decrement.dafny'
      'match': '(\\-\\-|\\+\\+)'
    }
    {
      'name': 'keyword.operator.arithmetic.dafny'
      'match': '(\\-|\\+|\\*|\\/|%)'
    }
    {
      'name': 'keyword.operator.logical.dafny'
      'match': '(!|&&|\\|\\|)'
    }
    {
      'name': 'keyword.operator.dereference.dafny'
      'match': '(?<=\\S)\\.(?=\\S)'
    }
  ]
  'parameters': 'patterns': [ {
    'name': 'storage.type.dafny'
    'match': '<.+?>'
  } ]
'patterns': [
  {
    'name': 'keyword.control.dafny'
    'match': '\\b(class|datatype|codatatype|type|function|ghost|var|method|constructor|comethod|abstract|module|import|default|as|opened|static|refines|returns|break|then|else|if|label|return|while|print|where|new|parallel|in|this|fresh|choose|match|case|assert|assume|predicate|copredicate|forall|exists|false|true|null|old|calc|iterator|yields|yield)\\b'
  }
  {
    'name': 'storage.type.dafny'
    'match': '<.+?>'
  }
  {
    'begin': '(\\w+)\\s*\\('
    'end': '\\)'
    'name': 'meta.method.identifier.dafny'
    'patterns': [ { 'include': '#parameters' } ]
    'beginCaptures': '1': 'name': 'entity.name.function.dafny'
  }
  { 'include': '#code' }
]
'foldingStartMarker': '(\\{\\s*(//.*)?$|^\\s*// \\{\\{\\{)'
'foldingStopMarker': '^\\s*(\\}|// \\}\\}\\}$)'
